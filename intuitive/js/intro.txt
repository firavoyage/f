https://docs.google.com/presentation/d/1tBwBFfMcoFgZOOXZkLICNCr3xg7Mm0EP2Cg5ao1bZLs

JavaScript
Mark Tabor and Abby Chou

Recap
HTML
Describes content and structure
What exists? How is it organized?
These together make a static website. No interaction, can‚Äôt do more.

Recap
HTML
Describes content and structure
What exists? How is it organized?
CSS
Describes the presentation
Colors! Fonts! Alignment, margins, borders, shading, and more
These together make a static website. No interaction, can‚Äôt do more.





... not related to Java üôÉ
JavaScript is...
... a programming language that manipulates the content of a web page
... how we take HTML + CSS and make it interactive!
... used by a vast majority of websites and web applications
... a programming language that manipulates the content of a web page
... how we take HTML + CSS and make it interactive!
... used by a vast majority of websites and web applications
Unrelated to java
Can click, use mouse, etc. Lets website respond.

Looks like ‚Äústandard programming language‚Äù

HTML
CSS
JS

Where does it go?
Where can we run JavaScript code?

The browser console
Windows
Chrome: Ctrl + Shift + J
Firefox: Ctrl + Shift + J
Mac
Chrome: Cmd + Option + J
Firefox: Cmd + Shift + J 
Tied to our HTML file (more on that later!)
Pull up the console to demonstrate

How to JavaScript

Types
JavaScript has 5 primitive data types:
Boolean (true, false)
Number (12, 1.618, -46.7, 0, etc.)
String (‚Äúhello‚Äù, ‚Äúworld!‚Äù, ‚Äú12‚Äù, ‚Äú‚Äù, etc.)
Null
Undefined
Number - pos neg, integer, decimal
String - denoted by quotes. Can have empty string
Null and undefined sound familiar, but there is a difference, which i will talk about in a bit.

Operators
Things (mostly) work how you would expect:
arithmetic operators
Arithmetic operators
Comparison operators
Note triple equal sign
for a ‚ú®fun‚ú® demonstration of JavaScript being dumb, check out https://www.destroyallsoftware.com/talks/wat


Operators
Things (mostly) work how you would expect:
arithmetic operators
comparison operators
(note the triple equals sign!)
Arithmetic operators
Comparison operators
Note triple equal sign
for a ‚ú®fun‚ú® demonstration of JavaScript being dumb, check out https://www.destroyallsoftware.com/talks/wat


Why we don‚Äôt use ==
So, we use === to check equality in JavaScript.
But what does == do?
It performs type coercion (i.e. forces the arguments to be of the same type before comparing them)
tl;dr don‚Äôt use ==

It performs type coercion (i.e. forces the arguments to be of the same type before comparing them)

Syntax
Every statement in JavaScript ends with a semicolon;
These are comments.
It doesn‚Äôt affect how the code runs, but you should use them to keep your codebase readable!
Curly braces denote where blocks begin and end.
Whitespace is ignored. (but can improve readability)
Semicolons - not actually necessary, but using them really improves readability and prevents bugs
Whitespace - can remove or add
Curly braces - blocks
Comments

for a ‚ú®fun‚ú® demonstration of JavaScript being dumb, check out https://www.destroyallsoftware.com/talks/wat



Defining variables
Single equals for variables,
Name that we can ‚Äúgive‚Äù a value
In javascript, when you first use a variable, you have to declare it
We use the ‚Äúlet‚Äù keyword to declare variable. After this, we can freely change the value

Note: Javascript conventions name variables using camelCase. Every word capitalized except for first.

note: re-declaring a variable with ‚Äúlet‚Äù when the variable already exists does not work in strict mode, but it runs without error in non-strict mode

Defining variables
JavaScript convention is to name variables using camelCase.
Single equals for variables,
Name that we can ‚Äúgive‚Äù a value
In javascript, when you first use a variable, you have to declare it
We use the ‚Äúlet‚Äù keyword to declare variable. After this, we can freely change the value

Note: Javascript conventions name variables using camelCase. Every word capitalized except for first.

note: re-declaring a variable with ‚Äúlet‚Äù when the variable already exists does not work in strict mode, but it runs without error in non-strict mode

Defining constants
To define a variable which cannot be re-assigned later:
Javascript also have constants


let vs. const
Why bother using const when let exists?



Why bother?

Safe code practice. Things that shouldn‚Äôt change can‚Äôt change. E.g. conversion factor

let vs. const
Why bother using const when let exists?

Safe code practices! If something should never be changed, don‚Äôt let it change :)

Why bother?

Safe code practice. Things that shouldn‚Äôt change can‚Äôt change. E.g. conversion factor

let vs. var
tl;dr please don‚Äôt use var
For people who have seen or used js before, may have seen var. Will see code snippets that use it. Short answer is don‚Äôt var.
Let was added to js because var would have unexpected behavior. (let has same behavior as other languages)


let vs. var
technical details (Google it if you‚Äôre interested):
let is block-scoped
var is function-scoped
let exists because people kept getting bugs when trying to use var
tl;dr please don‚Äôt use var
For people who have seen or used js before, may have seen var. Will see code snippets that use it. Short answer is don‚Äôt var.
Let was added to js because var would have unexpected behavior. (let has same behavior as other languages)


Questions?

null vs. undefined
undefined  means  ‚Äúdeclared but not yet assigned a value‚Äù
null  means  ‚Äúno value‚Äù
Undefined: default value
null: use null to clear a variable. Specifically saying variable is now empty.

Output
console.log() writes to the JavaScript console:
input


output
We often want output.
Prints whatever is given as input to the function.
Equivalent to print functions in other languages.
Why would u use it

Output
Handy for quick debugging!
Used for general debugging purposes

Output
Can also console log with template strings for more descriptive logging

Alerts
alert() generates a pop-up notification with the given content.
Another way to provide output is alert. Generates popup notification. 

Questions?

Arrays
For when you want to store a sequence of (ideally similar) items:
Up to this point we were talking about primitive data types, here we will start combining them into larger data structures.
Initialize array. Possible to mix types, but generally don‚Äôt need to and shouldn‚Äôt.
Access element in array, third element
- explain zero-index, and why it will be bird
Replace element in array - can put the element on LHS like a variable

Arrays
We will also often want to remove from the end
And add to the end
Lots of other commands to add and remove, like splice

Conditionals
We often want to perform different actions in response to different conditions.
For this, we use the conditional operators if, else, and else if:
Works like in english
If this is true, do this. Otherwise, if ‚Ä¶
Python uses elif

Indents not necessary, but we use them to keep code cleaner and organized

Conditionals
We often want to perform different actions in response to different conditions.
For this, we use the conditional operators if, else, and else if:
Note the indent (tab)!
It‚Äôs not necessary, but it will make your code much more readable.
Works like in english
If this is true, do this. Otherwise, if ‚Ä¶
Python uses elif

Indents not necessary, but we use them to keep code cleaner and organized

While loops
What if we want to repeat an action as long as some condition is satisfied?
While loop runs a certain block of code as long as a condition is satisfied
What does this code print?
It does print out 1024, check after block.

Be wary of syntax: parentheses and curly braces, which might be different from the language you‚Äôre coming from.

For loops
Useful when we want to iterate through indices:
Same array as before
For loop works as follows:
- create an index variable i that starts off as 0
- second chunk is the condition that the loop will check before every step
- third section (i++) shorthand for i = i+1, increments by 1 every step
This loop will output 4 strings, one for each.
Note that const is used inside the block. Can use here, since phrase only exists inside the block. Once leave, it is deleted.

Be wary of syntax: parentheses and curly braces, which might be different from the language you‚Äôre coming from.

For ‚Ä¶ of ‚Ä¶
A more ‚Äúpythonic‚Äù way of iterating:
Requires the keyword of instead of in
Another way of iterating, specifically for arrays and other ‚Äúiterable‚Äù types.
You won‚Äôt ever actually need this, since you can just use the regular for loop syntax, but I am just putting this out there in case you see it.
One big difference from python however, is that you must use of instead of in.
I would generally caution against using this syntax, since you don‚Äôt actually need it and it is just another thing to remember. And more importantly, if you‚Äôre coming from python, you might be accustomed to typing for blank in blank. The issue is that the syntax for ‚Ä¶ in ‚Ä¶ also exists in js, but it does something completely different and you might accidentally type ‚Äúin‚Äù.

Questions?
Comments?
Concerns?
The next topic is

Wait, we don‚Äôt have a primitive data type for this
If we want to store data, that‚Äôs not just one value. For example, if we wanted to store something more complicated like the data about a car, e.g. make, model, color, we have‚Ä¶

Objects
A JavaScript object is a collection of name:value pairs.
We create objects, which are collections of properties. Each property has a name, describing what it is, and a value describing what the value of this objects property is.
Syntax: curly brace around, colons to separate names and values, and commas to separate pairs. Lets you store related data in one variable.
Can think of them as the javascript equivalent to python dictionaries
So what can we do with this

Accessing properties
There are two ways to access object properties, if you know the property name:
If you know the property names, you can get the values

Object destructuring is a shorthand to obtain multiple properties at once.
Object destructuring
Say you want to get more than one properties out of an object at once. There is a shorthand called obj destructuring. Use it to save space and make cleaner code.

Object destructuring is a shorthand to obtain multiple properties at once.
Object destructuring
without object destructuring
Say you want to get more than one properties out of an object at once. There is a shorthand called obj destructuring. Use it to save space and make cleaner code.

Object destructuring is a shorthand to obtain multiple properties at once.
Object destructuring
without object destructuring
with object destructuring
Say you want to get more than one properties out of an object at once. There is a shorthand called obj destructuring. Use it to save space and make cleaner code.

Equality...?
We use === to check if two primitive variables are equal in JavaScript.
2 === ‚Äò2‚Äô is false because diff types
Use console for arr1 = [1,2,3]; arr2 = [1,2,3]; arr1 === arr2
See same behavior for arrays and objects

Equality...?
We use === to check if two primitive variables are equal in JavaScript.
But what does === mean for arrays and objects?
2 === ‚Äò2‚Äô is false because diff types
Use console for arr1 = [1,2,3]; arr2 = [1,2,3]; arr1 === arr2
See same behavior for arrays and objects

Object references
Object variables are references ‚Äì they point to where the data is actually stored.
person1
person2
Object
name:
‚ÄúBill Gates‚Äù
Object
name:
‚ÄúBill Gates‚Äù
=== checks if the references are equal.
Two objects created separately are stored separately, so their references are different!
Same goes for arrays ‚Äì two arrays created separately have different references.
Object variables are references, it just points to where an object is located in memory. So when creating an array, or an object, just put this in memory and has the variable point to that object in memory. All they know is where they point to.
=== checks if references point to the same spot
Primitives check actual values, more complicated data types things just check references.

How to copy arrays and objects
It‚Äôs not as simple as
													(Why not?)
Go into console to explain. Can mutate one. Just creating pointer to the same array.



How to copy arrays and objects
It‚Äôs not as simple as
													(Why not?)
You could also manually copy over every item / property. But where‚Äôs the fun in that?
One way to copy arrays and objects is to use the spread operator (...) like so:


Go into console to explain. Can mutate one. Just creating pointer to the same array.



Questions?

Functions
Do something
Sometimes, we want the function to return an output value.
Input(s)

Functions
Do something
Sometimes, we want the function to return an output value.
(parameters) => { body };
Input(s)
JS Function Syntax:

Functions
Do something
Sometimes, we want the function to return an output value.
(parameters) => { body };
Input(s)
JS Function Syntax:
{ body };
(parameters)
=>

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
This is how we represent a function in JS! 

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
What this code, as written, is doing, is it‚Äôs allotting a space in memory for this function, and then it‚Äôs storing the function in memory. So somewhere in memory we‚Äôve recorded the ability to take in an integer temperature, and do this calculation and return the result. But in order to actually use this function, there‚Äôs something we‚Äôre missing.

What do we need to add so we can call this function?
{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
celsiusToFahrenheit
We need to give it a name! We need a name that points to the location in memory where we stored the function. So let‚Äôs call it celsius to Fahrenheit.

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
celsiusToFahrenheit
And in JS, we do this by assigning the function to a variable. Notice that the syntax here is exactly the same as any other variable: we have const, which means we‚Äôre not going to change what this variable points to, then the variable name, then the equals sign. Then we have the value that we want the variable to point to, which in this case is our function, and then a semicolon. So it‚Äôs just a variable.

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
celsiusToFahrenheit
And in JS, we do this by assigning the function to a variable. Notice that the syntax here is exactly the same as any other variable: we have const, which means we‚Äôre not going to change what this variable points to, then the variable name, then the equals sign. Then we have the value that we want the variable to point to, which in this case is our function, and then a semicolon. So it‚Äôs just a variable.

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
celsiusToFahrenheit
And in JS, we do this by assigning the function to a variable. Notice that the syntax here is exactly the same as any other variable: we have const, which means we‚Äôre not going to change what this variable points to, then the variable name, then the equals sign. Then we have the value that we want the variable to point to, which in this case is our function, and then a semicolon. So it‚Äôs just a variable.

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
celsiusToFahrenheit
And in JS, we do this by assigning the function to a variable. Notice that the syntax here is exactly the same as any other variable: we have const, which means we‚Äôre not going to change what this variable points to, then the variable name, then the equals sign. Then we have the value that we want the variable to point to, which in this case is our function, and then a semicolon. So it‚Äôs just a variable.

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
celsiusToFahrenheit
And in JS, we do this by assigning the function to a variable. Notice that the syntax here is exactly the same as any other variable: we have const, which means we‚Äôre not going to change what this variable points to, then the variable name, then the equals sign. Then we have the value that we want the variable to point to, which in this case is our function, and then a semicolon. So it‚Äôs just a variable.

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
celsiusToFahrenheit
Functions are values stored in memory, just like strings, ints, etc. So we can assign variables to point to them!
And in JS, we do this by assigning the function to a variable. Notice that the syntax here is exactly the same as any other variable: we have const, which means we‚Äôre not going to change what this variable points to, then the variable name, then the equals sign. Then we have the value that we want the variable to point to, which in this case is our function, and then a semicolon. So it‚Äôs just a variable.

{ const tempFahrenheit = tempCelsius * 9/5 + 32;
return tempFahrenheit; };
(tempCelsius)
=>
celsiusToFahrenheit

Callback functions
In JavaScript, functions can be passed around like any other values.

This means we can give a ‚Äúcallback‚Äù function as an argument to another function!

Quick Practice!
Write a function that prints a simple message to the console. 
Syntax reference: 
(parameters) => { body }; (but we don‚Äôt need any parameters)
console.log(‚Äúyour message‚Äù);
Remember to give your function a name!


Example: setTimeout
setTimeout() calls a function after a specified delay. It takes 2 parameters: the function to call (aka callback function), and the delay (in milliseconds).


Example: setTimeout
setTimeout() calls a function after a specified delay. It takes 2 parameters: the function to call (aka callback function), and the delay (in milliseconds).
How can we print our message after 5 seconds? (multiple-select)
A.									
B.
C. 

Example: setTimeout
setTimeout() calls a function after a specified delay. It takes 2 parameters: the function to call, and the delay (in milliseconds).
How can we print our message after 5 seconds?
A.									
B.
C. 
DON‚ÄôT DO THIS! printSomething() is whatever printSomething returns, not the function itself

What‚Äôs going on in Option C?
These are equivalent‚Ä¶

What‚Äôs going on in Option C?
These are equivalent‚Ä¶
And so are these!

What‚Äôs going on in Option C?
These are equivalent‚Ä¶
And so are these!
(the highlighted parts are the same)

setInterval() vs. setTimeout()
setInterval()
Repeatedly calls a function with a delay between each call
Returns an intervalID which can be passed into clearInterval() to terminate
Arguments: func, delay, arg0, ‚Ä¶, argN



setTimeout()
Sets a timer that executes a function when the timer ends
Returns an intervalID which can be passed into clearTimeout() to cancel the timer
Arguments: func, delay, arg0, ‚Ä¶, argN
Check out MDN docs for more info!

Classes
Classes are used when we have multiple objects that all represent the same type of thing. They let us define the attributes 
and methods 
that every object of that type, or class, has.
Classes are not really used in weblab! So do not worry about this!

Summary
JavaScript is how we make things happen!
Declare variables using let, const. 
boolean, number, string, null, undefined
functions, arrays, objects, classes
if, else, while, for
setInterval() vs. setTimeout()

Up next: hands-on JavaScript workshop!



Questions?
Go to catbook-react

Announcements
Hw0 (Setup) weblab.is/home
Also has a link to flexbox froggy if you want to learn about/practice CSS flexbox!
Need to install Node by tomorrow!
Office Hours tonight 7-9pm in 32-082!
Come for setup issues, or if you‚Äôre new to programming and want to go over javascript or git!
Milestone 0 (find a team and brainstorm 10 ideas) due eod Wednesday
Recordings from today will be available as soon as we edit + post them (hopefully this evening). Slides and other links are all at weblab.is/home
team formation mixer (right now! :D find teammates! )
Give us feedback üëâüëà (weblab.is/feedback)
Theme: ‚ÄúSend it or blend it‚Äù
