const f={is:(r,t)=>null!=r&&("array"==t?Array.isArray(r):"function"==typeof t?r instanceof t:typeof r==t),has(r,...t){const{is:e}=f;if(!e(r,"object"))return!1;let n=r;for(const r of t){if(!Object.prototype.hasOwnProperty.call(n,r))return!1;n=n[r]}return!0},keys:r=>Object.keys(r),values:r=>Object.values(r),each:r=>Array.from({length:r+1},((r,t)=>t)),flatten(r,t){const{is:e,map:n}=f;let s={},a=r;for(;;){const r={};if(n(a,(([a,o])=>{"object"==typeof o?n(o,(([n,s])=>{""==n?r[a]=s:e(t,"string")?r[`${a}${t}${n}`]=s:e(t,"function")&&(r[t(a,n)]=s)})):s[a]=o})),a=r,0==Object.keys(a).length)break}return s},map(r,t){if(Array.isArray(r))return r.map(t);{const e=Object.entries(r).map(t);return e.every((r=>Array.isArray(r)&&r.length>=2))?Object.fromEntries(e):e}}};