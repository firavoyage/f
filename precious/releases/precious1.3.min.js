(()=>{const e={"=":"=","!=":"\\neq","<":"<",">":">","<=":"\\leq",">=":"\\geq","â‰ˆ":"\\approx","~":"\\sim",alpha:"\\alpha",beta:"\\beta",gamma:"\\gamma",delta:"\\delta",epsilon:"\\epsilon",zeta:"\\zeta",eta:"\\eta",theta:"\\theta",iota:"\\iota",kappa:"\\kappa",lambda:"\\lambda",mu:"\\mu",nu:"\\nu",xi:"\\xi",omicron:"\\omicron",pi:"\\pi",rho:"\\rho",sigma:"\\sigma",tau:"\\tau",upsilon:"\\upsilon",phi:"\\phi",chi:"\\chi",psi:"\\psi",omega:"\\omega",Gamma:"\\Gamma",Delta:"\\Delta",Theta:"\\Theta",Lambda:"\\Lambda",Xi:"\\Xi",Pi:"\\Pi",Sigma:"\\Sigma",Upsilon:"\\Upsilon",Phi:"\\Phi",Psi:"\\Psi",Omega:"\\Omega",infinity:"\\infty",infty:"\\infty",inf:"\\infty",partial:"\\partial",nabla:"\\nabla",in:"\\in",notin:"\\notin",subset:"\\subset",subseteq:"\\subseteq",supset:"\\supset",supseteq:"\\supseteq",cup:"\\cup",cap:"\\cap",emptyset:"\\emptyset",forall:"\\forall",exists:"\\exists",nexists:"\\nexists",and:"\\land",or:"\\lor",not:"\\lnot",implies:"\\implies",iff:"\\iff",int:"\\int",oint:"\\oint",prod:"\\prod",lim:"\\lim",nabla:"\\nabla",langle:"\\langle",rangle:"\\rangle",to:"\\to",rightarrow:"\\rightarrow",leftarrow:"\\leftarrow",leftrightarrow:"\\leftrightarrow",Rightarrow:"\\Rightarrow",Leftarrow:"\\Leftarrow",Leftrightarrow:"\\Leftrightarrow","->":"\\rightarrow","<-":"\\leftarrow","<->":"\\leftrightarrow","=>":"\\Rightarrow","<=>":"\\Leftrightarrow",cdot:"\\cdot",pm:"\\pm",mp:"\\mp",times:"\\times",div:"\\div",circ:"\\circ",deg:"^\\circ",prime:"\\prime",ldots:"\\ldots",cdots:"\\cdots",vdots:"\\vdots",ddots:"\\ddots",perp:"\\perp",parallel:"\\parallel",angle:"\\angle",triangle:"\\triangle",congruent:"\\cong",similar:"\\sim",propto:"\\propto"};for(const t of Object.keys(e))e[t]=` ${e[t]} `;const t=[["_"],["^"],["//","%%"],["*","/"]],r={"^":(e,t)=>`{${e}}^{${a(t)}}`,_:(e,t)=>`{${e}}_{${a(t)}}`,"//":(e,t)=>`\\lfloor\\frac{${e}}{${t}}\\rfloor`,"%%":(e,t)=>`${e} \\bmod ${t}`,"*":(e,t)=>`${e} \\cdot ${t}`,"/":(e,t)=>`\\frac{${a(e)}}{${a(t)}}`},l={brace(...e){let t=e.join(",");return t.includes("\\\\")?(t.startsWith("\\\\")&&(t=t.slice(2)),t.endsWith("\\\\")&&(t=t.slice(0,-2)),t.includes("&")?`\\begin{cases}${t}\\end{cases}`:`\\left\\{\\begin{array}{l}${t}\\end{array}\\right.`):`\\{${t}\\}`},sum:(e,t,r)=>`\\sum_{${e}}^{${t}}{${i(r)}}`,v:e=>`\\vec{${e}}`,sqrt:e=>`\\sqrt{${e}}`,root:(e,t)=>`\\sqrt{${e}}{${t}}`,log:(e,t)=>`\\log_{${e}}{${i(t)}}`,ln:e=>`\\ln{${i(e)}}`,sin:e=>`\\sin{${i(e)}}`,cos:e=>`\\cos{${i(e)}}`,tan:e=>`\\tan{${i(e)}}`,abs:e=>`|${e}|`,floor:e=>`\\lfloor ${e} \\rfloor`,ceil:e=>`\\lceil ${e} \\rceil`},i=e=>{let t,r=e;do{t=r.length,r=r.replace(/\([^()]*\)/g,"").replace(/\[[^\[\]]*\]/g,"").replace(/\{[^{}]*\}/g,"")}while(r.length<t);return["+","-","\\times","\\cdot","\\ast","\\star","\\div","\\pm","\\mp","\\oplus","\\ominus","\\otimes","\\oslash","\\odot","\\circ","\\bullet","\\dagger","\\ddagger","\\cap","\\cup","\\sqcap","\\sqcup","\\uplus","\\bigcirc","\\bigtriangleup","\\bigtriangledown","\\wr","\\amalg"].some((e=>r.includes(e)))?`(${e})`:e},a=e=>{if(e.length<2||"("!==e[0]||")"!==e[e.length-1])return e;let t=0;for(let r=0;r<e.length;r++)if("("===e[r])t++;else if(")"===e[r]&&(t--,0===t&&r!==e.length-1))return e;return 0===t?e.slice(1,-1):e},s=e=>{const t=Symbol();return"string"!=typeof e?t:/^[0-9.]+$/.test(e)?"number":/^[a-zA-Z]+$/.test(e)?"variable":["(",")","[","]","{","}"].includes(e)?t:"symbol"},o=(e,t,r,l)=>{for(;;){let i=-1,a=-1;for(let t=0;t<e.length;t++)if("("===e[t])i=t;else if(")"===e[t]){if(-1===i)throw new Error("Unmatched closing parenthesis");a=t;break}if(-1===a){if(-1!==i)throw new Error("Unmatched opening parenthesis");break}const s=e.slice(i+1,a);let n=null;if(i>0&&e[i-1]in l&&(n=e[i-1]),n){const p=[];let c=0,g=0;for(let e=0;e<s.length;e++){const t=s[e];"("===t?g++:")"===t?g--:","===t&&0===g&&(p.push(s.slice(c,e)),c=e+1)}p.push(s.slice(c));const m=p.map((e=>o(e,t,r,l))),h=l[n](...m);e.splice(i-1,a-i+2,h)}else{const n=`(${o(s,t,r,l)})`;e.splice(i,a-i+1,n)}}for(const l of t){const t=new Set(l);let i=0;for(;i<e.length;)if(t.has(e[i])){if(i-1<0||i+1>=e.length)throw new Error(`Operator '${e[i]}' at position ${i} is missing an operand`);const t=e[i-1],l=e[i+1],a=e[i],s=r[a](t,l);e.splice(i-1,3,s),i=0}else i++}return e.join("")};globalThis.precious=i=>(i=((e,t)=>e.map((e=>t[e.replaceAll(" ","")]??e)))(i=(i=((e,t)=>{const r=[];for(let l=0;l<e.length;l++)r.push(...e[l]),l<e.length-1&&r.push(t);return r})(i=(i=(i=(i=i.replaceAll("{","brace(").replaceAll("}",")")).replaceAll("[","preciousbracketbegin(").replaceAll("]",")preciousbracketend")).split("\n").map((e=>e.split(/\s+/).join(" ")))).map((e=>(e=>{if(0===e.length)return[];const t=[];let r=e[0],l=s(e[0]);for(let i=1;i<e.length;i++){const a=e[i],o=s(a);o===l?r+=a:(t.push(r),r=a,l=o)}return t.push(r),t})(e))),"\\\\")).map((e=>" "==e?" ":e.replaceAll(" ",""))),e),i=i.map(((e,t)=>" "==e&&"symbol"!=s(i[t-1])&&"symbol"!=s(i[t+1])?" \\: ":e)),i=(i=o(i,t,r,l)).replaceAll("preciousbracketbegin(","[").replaceAll(")preciousbracketend","]"))})();