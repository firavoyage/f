const precious=t=>{const e={"=":"=","!=":"\\neq","<":"<",">":">","<=":"\\leq",">=":"\\geq","â‰ˆ":"\\approx","~":"\\sim",alpha:"\\alpha",beta:"\\beta",gamma:"\\gamma",delta:"\\delta",epsilon:"\\epsilon",zeta:"\\zeta",eta:"\\eta",theta:"\\theta",iota:"\\iota",kappa:"\\kappa",lambda:"\\lambda",mu:"\\mu",nu:"\\nu",xi:"\\xi",omicron:"\\omicron",pi:"\\pi",rho:"\\rho",sigma:"\\sigma",tau:"\\tau",upsilon:"\\upsilon",phi:"\\phi",chi:"\\chi",psi:"\\psi",omega:"\\omega",Gamma:"\\Gamma",Delta:"\\Delta",Theta:"\\Theta",Lambda:"\\Lambda",Xi:"\\Xi",Pi:"\\Pi",Sigma:"\\Sigma",Upsilon:"\\Upsilon",Phi:"\\Phi",Psi:"\\Psi",Omega:"\\Omega",infinity:"\\infty",infty:"\\infty",partial:"\\partial",nabla:"\\nabla",in:"\\in",notin:"\\notin",subset:"\\subset",subseteq:"\\subseteq",supset:"\\supset",supseteq:"\\supseteq",cup:"\\cup",cap:"\\cap",emptyset:"\\emptyset",forall:"\\forall",exists:"\\exists",nexists:"\\nexists",and:"\\land",or:"\\lor",not:"\\lnot",implies:"\\implies",iff:"\\iff",int:"\\int",oint:"\\oint",sum:"\\sum",prod:"\\prod",lim:"\\lim",nabla:"\\nabla",langle:"\\langle",rangle:"\\rangle",to:"\\to",rightarrow:"\\rightarrow",leftarrow:"\\leftarrow",leftrightarrow:"\\leftrightarrow",Rightarrow:"\\Rightarrow",Leftarrow:"\\Leftarrow",Leftrightarrow:"\\Leftrightarrow",cdot:"\\cdot",pm:"\\pm",mp:"\\mp",times:"\\times",div:"\\div",circ:"\\circ",deg:"^\\circ",prime:"\\prime",ldots:"\\ldots",cdots:"\\cdots",vdots:"\\vdots",ddots:"\\ddots",sqrt:"\\sqrt",perp:"\\perp",parallel:"\\parallel",angle:"\\angle",triangle:"\\triangle",congruent:"\\cong",similar:"\\sim",propto:"\\propto"};for(const t of Object.keys(e))e[t]=` ${e[t]} `;const i={"^":(t,e)=>`{${t}}^{${e}}`,_:(t,e)=>`{${t}}_{${e}}`,"//":(t,e)=>`\\lfloor\\frac{${t}}{${e}}\\rfloor`,"%%":(t,e)=>`${t} \\bmod ${e}`,"*":(t,e)=>`${t} \\cdot ${e}`,"/":(t,e)=>`\\frac{${o(t)}}{${o(e)}}`},r={sqrt:t=>`\\sqrt{${t}}`,root:(t,e)=>`\\sqrt{${t}}{${e}}`,log:(t,e)=>`\\log_{${t}}{${a(e)}}`,ln:t=>`\\ln{${a(t)}}`,sin:t=>`\\sin{${a(t)}}`,cos:t=>`\\cos{${a(t)}}`,tan:t=>`\\tan{${a(t)}}`,abs:t=>`|${t}|`,floor:t=>`\\lfloor ${t} \\rfloor`,ceil:t=>`\\lceil ${t} \\rceil`},a=t=>{let e=!1;return["+","-","\\times","\\cdot","\\div"].map((i=>{t.includes(i)&&(e=!0)})),e?`(${t})`:t},o=t=>{if(t.length<2||"("!==t[0]||")"!==t[t.length-1])return t;let e=0;for(let i=0;i<t.length;i++)if("("===t[i])e++;else if(")"===t[i]&&(e--,0===e&&i!==t.length-1))return t;return 0===e?t.slice(1,-1):t},l=t=>/^[0-9.]+$/.test(t)?"number":/^[a-zA-Z]+$/.test(t)?"variable":["(",")","[","]","{","}"].includes(t)?Symbol():"symbol",s=(t,e,i,r)=>{for(;;){let a=-1,o=-1;for(let e=0;e<t.length;e++)if("("===t[e])a=e;else if(")"===t[e]){if(-1===a)throw new Error("Unmatched closing parenthesis");o=e;break}if(-1===o){if(-1!==a)throw new Error("Unmatched opening parenthesis");break}const l=t.slice(a+1,o);let n=null;if(a>0&&t[a-1]in r&&(n=t[a-1]),n){const p=[];let c=0,m=0;for(let t=0;t<l.length;t++){const e=l[t];"("===e?m++:")"===e?m--:","===e&&0===m&&(p.push(l.slice(c,t)),c=t+1)}p.push(l.slice(c));const f=p.map((t=>s(t,e,i,r))),g=r[n](...f);t.splice(a-1,o-a+2,g)}else{const n=`(${s(l,e,i,r)})`;t.splice(a,o-a+1,n)}}for(const r of e){const e=new Set(r);let a=0;for(;a<t.length;)if(e.has(t[a])){if(a-1<0||a+1>=t.length)throw new Error(`Operator '${t[a]}' at position ${a} is missing an operand`);const e=t[a-1],r=t[a+1],o=t[a],l=i[o](e,r);t.splice(a-1,3,l),a=0}else a++}return t.join("")};return t=((t,e)=>t.map((t=>e[t.replaceAll(" ","")]??t)))(t=(t=(t=>{if(0===t.length)return[];const e=[];let i=t[0],r=l(t[0]);for(let a=1;a<t.length;a++){const o=t[a],s=l(o);s===r?i+=o:(e.push(i),i=o,r=s)}return e.push(i),e})(t=t.split("\n").map((t=>t.split(/\s+/).join(" "))).join("\\\\"))).map((t=>1==t.length?t:t.replaceAll(" ",""))),e),t=s(t,[["_"],["^"],["//","%%"],["*","/"]],i,r)};